// Prisma schema for Campus backend (Neon PostgreSQL)
// Set DATABASE_URL in server/.env

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  phone     String?  @unique
  password  String
  firstName String
  lastName  String
  role      String   // admin | principal | teacher | student | parent | guest | super_admin | support_admin | sales_admin | content_admin | finance_admin
  schoolId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school              School?             @relation(fields: [schoolId], references: [id])
  parentRelations     ParentChild[]       @relation("ParentUser")
  childRelations      ParentChild[]       @relation("ChildUser")
  passwordResetTokens PasswordResetToken[]
  otpCodes            OtpCode[]
  loginAudits         LoginAudit[]
}

model School {
  id        String     @id @default(uuid())
  name      String
  code      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  users     User[]
  classes   ClassRoom[]
  students  Student[]
  teachers  Teacher[]
}

model ClassRoom {
  id        String   @id @default(uuid())
  name      String
  capacity  Int      @default(40)
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school    School   @relation(fields: [schoolId], references: [id])
  students  Student[]
}

model Student {
  id         String    @id @default(uuid())
  firstName  String
  lastName   String
  email      String?   @unique
  schoolId   String
  classId    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  school     School    @relation(fields: [schoolId], references: [id])
  classRoom  ClassRoom? @relation(fields: [classId], references: [id])
}

model Teacher {
  id         String    @id @default(uuid())
  firstName  String
  lastName   String
  email      String    @unique
  schoolId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  school     School    @relation(fields: [schoolId], references: [id])
}

// Parent-Child relationship model
model ParentChild {
  id        String   @id @default(uuid())
  parentId  String
  childId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent    User     @relation("ParentUser", fields: [parentId], references: [id], onDelete: Cascade)
  child     User     @relation("ChildUser", fields: [childId], references: [id], onDelete: Cascade)

  @@unique([parentId, childId])
}

// Password reset tokens
model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// OTP codes for verification
model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  channel   String   // 'email' | 'phone'
  code      String
  purpose   String   // 'login' | 'reset' | 'verify'
  expiresAt DateTime
  consumed  Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Login audit trail
model LoginAudit {
  id        String   @id @default(uuid())
  userId    String?
  email     String?
  phone     String?
  ip        String?
  userAgent String?
  success   Boolean
  context   String   // 'admin' | 'user' | 'guest'
  reason    String?  // failure reason if applicable
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}
